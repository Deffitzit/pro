>>> __init__(self, *, level: int) -> None
Конструктор класса. Инициализирует новый объект расы с заданным уровнем. Расчет здоровья и силы атаки производится на основе уровня, умножая базовые значения, определенные в наследующих классах.

- Параметры:
  - level (int): Уровень расы.

>>> attack(self, *, target: "Storage") -> None
Метод для выполнения атаки на цель. Уменьшает здоровье цели на величину атаки текущего объекта.

- Параметры:
  - target (Storage): Цель, на которую происходит атака.

>>> is_alive(self) -> bool
Метод, который проверяет, жив ли текущий объект расы, основываясь на значении здоровья. Возвращает True, если здоровье больше нуля, и False в противном случае.

- Возвращаемое значение: bool

>>> __str__(self) -> str
Метод для получения строкового представления объекта. Выводит информацию о расе, уровне и здоровье.

- Возвращаемое значение: str

>>> Ork, Elf, Dwarf

Эти классы наследуют от класса Storage и определяют специфические параметры для каждой расы.

- Атрибуты:
  - race_health_points: Базовое количество здоровья.
  - race_attack_power: Базовая сила атаки.
  - race_name: Имя расы.

>>> fight(*, race_1: Storage, race_2: Storage) -> None
Функция, организующая бой между двумя расами. Вызывает метод атаки для каждой расы в цикле до тех пор, пока одна из рас не погибнет. По завершении боя выводит информацию о состоянии победителя.

- Параметры:
  - race_1 (Storage): Первая раса.
  - race_2 (Storage): Вторая раса.
  
>> Графический интерфейс

>>> tk.Tk()
Создает основное окно приложения.

>>> root.title("Битва Рас")
Устанавливает заголовок окна приложения.

>>> tk.StringVar(value="Орк") и tk.IntVar(value=1)
Создает переменные для хранения значений, выбираемых пользователем для рас и уровней.

>>> tk.Label
Создает текстовую метку для отображения информации на интерфейсе.

>>> tk.OptionMenu
Создает выпадающее меню для выбора расы.

>>> tk.Scale
Создает ползунок для выбора уровня для рас, ограниченный от 1 до 20.

>>> tk.Button
Создает кнопку, которая запускает бой при нажатии.

>>> root.mainloop()
Запускает главный цикл приложения, который обеспечивает его работу и обработку событий.
